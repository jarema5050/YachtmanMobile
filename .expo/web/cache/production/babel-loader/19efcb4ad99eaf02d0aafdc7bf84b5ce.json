{"ast":null,"code":"import base64 from'base64-js';export function padding(str){var paddingLength=4;var mod=str.length%paddingLength;var pad=paddingLength-mod;if(mod===0){return str;}return str+new Array(1+pad).join('=');}function byteArrayToHex(raw){var HEX='';for(var i=0;i<raw.length;i++){var _hex=raw[i].toString(16);HEX+=_hex.length===2?_hex:'0'+_hex;}return HEX;}export function decodeToHEX(str){return byteArrayToHex(base64.toByteArray(padding(str)));}","map":{"version":3,"sources":["/Users/sokolowski/Documents/Private Repositories/YachtmanMobile/node_modules/react-native-auth0/src/jwt/base64.js"],"names":["base64","padding","str","paddingLength","mod","length","pad","Array","join","byteArrayToHex","raw","HEX","i","_hex","toString","decodeToHEX","toByteArray"],"mappings":"AAIA,MAAOA,CAAAA,MAAP,KAAmB,WAAnB,CAEA,MAAO,SAASC,CAAAA,OAAT,CAAiBC,GAAjB,CAAsB,CAC3B,GAAMC,CAAAA,aAAa,CAAG,CAAtB,CACA,GAAMC,CAAAA,GAAG,CAAGF,GAAG,CAACG,MAAJ,CAAaF,aAAzB,CACA,GAAMG,CAAAA,GAAG,CAAGH,aAAa,CAAGC,GAA5B,CAEA,GAAIA,GAAG,GAAK,CAAZ,CAAe,CACb,MAAOF,CAAAA,GAAP,CACD,CAED,MAAOA,CAAAA,GAAG,CAAG,GAAIK,CAAAA,KAAJ,CAAU,EAAID,GAAd,EAAmBE,IAAnB,CAAwB,GAAxB,CAAb,CACD,CAED,QAASC,CAAAA,cAAT,CAAwBC,GAAxB,CAA6B,CAC3B,GAAIC,CAAAA,GAAG,CAAG,EAAV,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,GAAG,CAACL,MAAxB,CAAgCO,CAAC,EAAjC,CAAqC,CACnC,GAAMC,CAAAA,IAAI,CAAGH,GAAG,CAACE,CAAD,CAAH,CAAOE,QAAP,CAAgB,EAAhB,CAAb,CACAH,GAAG,EAAIE,IAAI,CAACR,MAAL,GAAgB,CAAhB,CAAoBQ,IAApB,CAA2B,IAAMA,IAAxC,CACD,CAED,MAAOF,CAAAA,GAAP,CACD,CAED,MAAO,SAASI,CAAAA,WAAT,CAAqBb,GAArB,CAA0B,CAC/B,MAAOO,CAAAA,cAAc,CAACT,MAAM,CAACgB,WAAP,CAAmBf,OAAO,CAACC,GAAD,CAA1B,CAAD,CAArB,CACD","sourcesContent":["/**\n * Borrowed from IDToken-verifier package\n * https://github.com/auth0/idtoken-verifier/blob/master/src/helpers/base64.js\n */\nimport base64 from 'base64-js';\n\nexport function padding(str) {\n  const paddingLength = 4;\n  const mod = str.length % paddingLength;\n  const pad = paddingLength - mod;\n\n  if (mod === 0) {\n    return str;\n  }\n\n  return str + new Array(1 + pad).join('=');\n}\n\nfunction byteArrayToHex(raw) {\n  let HEX = '';\n\n  for (let i = 0; i < raw.length; i++) {\n    const _hex = raw[i].toString(16);\n    HEX += _hex.length === 2 ? _hex : '0' + _hex;\n  }\n\n  return HEX;\n}\n\nexport function decodeToHEX(str) {\n  return byteArrayToHex(base64.toByteArray(padding(str)));\n}\n"]},"metadata":{},"sourceType":"module"}
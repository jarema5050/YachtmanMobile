{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import SceneView from\"./SceneView\";import NavigationBuilderContext from\"./NavigationBuilderContext\";import useNavigationCache from\"./useNavigationCache\";import NavigationContext from\"./NavigationContext\";import NavigationRouteContext from\"./NavigationRouteContext\";export default function useDescriptors(_ref){var state=_ref.state,screens=_ref.screens,navigation=_ref.navigation,screenOptions=_ref.screenOptions,onAction=_ref.onAction,getState=_ref.getState,setState=_ref.setState,addActionListener=_ref.addActionListener,addFocusedListener=_ref.addFocusedListener,addStateGetter=_ref.addStateGetter,onRouteFocus=_ref.onRouteFocus,router=_ref.router,emitter=_ref.emitter;var _React$useState=React.useState({}),_React$useState2=_slicedToArray(_React$useState,2),options=_React$useState2[0],setOptions=_React$useState2[1];var _React$useContext=React.useContext(NavigationBuilderContext),onDispatchAction=_React$useContext.onDispatchAction,onOptionsChange=_React$useContext.onOptionsChange;var context=React.useMemo(function(){return{navigation:navigation,onAction:onAction,addActionListener:addActionListener,addFocusedListener:addFocusedListener,addStateGetter:addStateGetter,onRouteFocus:onRouteFocus,onDispatchAction:onDispatchAction,onOptionsChange:onOptionsChange};},[addActionListener,addFocusedListener,addStateGetter,navigation,onAction,onDispatchAction,onRouteFocus,onOptionsChange]);var navigations=useNavigationCache({state:state,getState:getState,navigation:navigation,setOptions:setOptions,router:router,emitter:emitter});return state.routes.reduce(function(acc,route){var screen=screens[route.name];var navigation=navigations[route.key];var routeOptions=_objectSpread(_objectSpread(_objectSpread({},typeof screenOptions==='object'||screenOptions==null?screenOptions:screenOptions({route:route,navigation:navigation})),typeof screen.options==='object'||screen.options==null?screen.options:screen.options({route:route,navigation:navigation})),options[route.key]);acc[route.key]={navigation:navigation,render:function render(){return React.createElement(NavigationBuilderContext.Provider,{key:route.key,value:context},React.createElement(NavigationContext.Provider,{value:navigation},React.createElement(NavigationRouteContext.Provider,{value:route},React.createElement(SceneView,{navigation:navigation,route:route,screen:screen,getState:getState,setState:setState,options:routeOptions}))));},options:routeOptions};return acc;},{});}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","onOptionsChange","context","navigation","onAction","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","onDispatchAction","navigations","useNavigationCache","state","getState","setOptions","router","screen","screens","route","routeOptions","screenOptions","options","acc","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      navigation,\n      onAction,\n      onDispatchAction,\n      onRouteFocus,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}
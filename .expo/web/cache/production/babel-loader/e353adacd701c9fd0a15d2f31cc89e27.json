{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import React,{useEffect}from'react';import View from\"react-native-web/dist/exports/View\";import{createDrawerNavigator,DrawerContentScrollView,DrawerItemList,DrawerItem}from'@react-navigation/drawer';import{Button}from'react-native-elements';import ProfileStack from\"./ProfileStack\";import Animated from'react-native-reanimated';import Logout from\"../../services/Logout\";import LoginContext from\"../../Contexts/LoginContext\";import ChangePassword from\"../ChangePassword\";import AsyncStorage from'@react-native-community/async-storage';import DrawerNav from\"../DrawerNav\";var colors=require(\"../../utilities/Colors\");function FirstScreen(_ref){var navigation=_ref.navigation;return React.createElement(View,{style:{flex:1,alignItems:'center',justifyContent:'center'}},React.createElement(Button,{onPress:function onPress(){return navigation.navigate('Notifications');},title:\"Go to notifications\"}));}function SecondScreen(_ref2){var navigation=_ref2.navigation;return React.createElement(View,{style:{flex:1,alignItems:'center',justifyContent:'center'}},React.createElement(Button,{onPress:function onPress(){return navigation.goBack();},title:\"Go back home\"}));}function ProfileDrawerContent(_ref3){var isLoggedInSocial=_ref3.isLoggedInSocial,progress=_ref3.progress,onLogoutPressed=_ref3.onLogoutPressed,rest=_objectWithoutProperties(_ref3,[\"isLoggedInSocial\",\"progress\",\"onLogoutPressed\"]);return function(isLoggedInSocial){var translateX=Animated.interpolate(progress,{inputRange:[0,1],outputRange:[-100,0]});function fetchData(){var convertSub,userData,email,sub;return _regeneratorRuntime.async(function fetchData$(_context){while(1){switch(_context.prev=_context.next){case 0:convertSub=function convertSub(sub){var array=sub.split('|');return array[0];};_context.prev=1;_context.next=4;return _regeneratorRuntime.awrap(AsyncStorage.getItem('@user_data'));case 4:userData=_context.sent;if(!(userData!==null)){_context.next=9;break;}email=JSON.parse(userData).email;sub=JSON.parse(userData).sub;return _context.abrupt(\"return\",{email:email,connection:convertSub(sub)});case 9:_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);console.log(\"Err \"+_context.t0.message);return _context.abrupt(\"return\",null);case 15:case\"end\":return _context.stop();}}},null,null,[[1,11]],Promise);}var isLoggedInSocial=null;useEffect(function(){isLoggedInSocial=fetchData();});return React.createElement(DrawerContentScrollView,rest,React.createElement(Animated.View,{style:{transform:[{translateX:translateX}]}},React.createElement(DrawerItemList,rest),React.createElement(DrawerItem,{activeTintColor:colors.brandOrange,inactiveTintColor:colors.navBorderGrey,label:\"Logout\",onPress:function onPress(){Logout();onLogoutPressed();}}),isLoggedInSocial=='auth0'&&React.createElement(DrawerItem,{activeTintColor:colors.brandOrange,inactiveTintColor:colors.navBorderGrey,label:\"Change Password\",onPress:function onPress(){return ChangePassword();}})));}(isLoggedInSocial);}export default function ProfileDrawerNav(){return React.createElement(LoginContext.Consumer,null,function(value){console.log(value);return React.createElement(DrawerNav,{screensArray:[{name:\"Profile\",component:ProfileStack},{name:\"Second\",component:SecondScreen}],customContent:function customContent(props){return React.createElement(ProfileDrawerContent,_extends({},props,{onLogoutPressed:value.logoutFunc}));}});});}","map":{"version":3,"sources":["/Users/sokolowski/Documents/Private Repositories/YachtmanMobile/components/Profile/ProfileDrawer.js"],"names":["React","useEffect","createDrawerNavigator","DrawerContentScrollView","DrawerItemList","DrawerItem","Button","ProfileStack","Animated","Logout","LoginContext","ChangePassword","AsyncStorage","DrawerNav","colors","require","FirstScreen","navigation","flex","alignItems","justifyContent","navigate","SecondScreen","goBack","ProfileDrawerContent","isLoggedInSocial","progress","onLogoutPressed","rest","translateX","interpolate","inputRange","outputRange","fetchData","convertSub","sub","array","split","getItem","userData","email","JSON","parse","connection","console","log","message","transform","brandOrange","navBorderGrey","ProfileDrawerNav","value","name","component","props","logoutFunc"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { View } from 'react-native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from 'react-native-elements';\nimport ProfileStack from './ProfileStack';\nimport Animated from 'react-native-reanimated';\nimport Logout from '../../services/Logout';\nimport LoginContext from '../../Contexts/LoginContext'\nimport ChangePassword from '../ChangePassword'\nimport AsyncStorage from '@react-native-community/async-storage';\nimport DrawerNav from \"../DrawerNav\"\n\nconst colors = require(\"../../utilities/Colors\")\nfunction FirstScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() => navigation.navigate('Notifications')}\n        title=\"Go to notifications\"\n      />\n    </View>\n  )\n}\n\nfunction SecondScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()} title=\"Go back home\" />\n    </View>\n  )\n}\n\nfunction ProfileDrawerContent({ isLoggedInSocial, progress, onLogoutPressed, ...rest}) {\n  const translateX = Animated.interpolate(progress, {\n    inputRange: [0, 1],\n    outputRange: [-100, 0],\n  })\n  async function fetchData() {\n    const convertSub = (sub) => {\n      const array = sub.split('|');\n      return array[0];\n    }\n    try {\n        const userData = await AsyncStorage.getItem('@user_data');\n        if (userData !== null) {\n            const email = JSON.parse(userData).email\n            const sub = JSON.parse(userData).sub\n            return {email: email, connection: convertSub(sub)}\n            \n        }\n      } catch (error) {\n        console.log(\"Err \" + error.message)\n        return null\n      }\n  }\n  var isLoggedInSocial = null;\n  useEffect(() => {\n    isLoggedInSocial = fetchData()\n  });\n  \n\n  return (\n    <DrawerContentScrollView {...rest}>\n      <Animated.View style={{ transform: [{ translateX }] }}>\n        <DrawerItemList {...rest} />\n        <DrawerItem activeTintColor={colors.brandOrange} inactiveTintColor={colors.navBorderGrey} label=\"Logout\" onPress={() => {\n          Logout()\n          onLogoutPressed()\n        } \n        } />\n        {\n          isLoggedInSocial == 'auth0' &&\n            <DrawerItem activeTintColor={colors.brandOrange} inactiveTintColor={colors.navBorderGrey} label=\"Change Password\" onPress={() => ChangePassword()}/>\n        }\n      </Animated.View>\n    </DrawerContentScrollView>\n  )\n}\n\n\nexport default function ProfileDrawerNav() {\n  return (\n    <LoginContext.Consumer>\n      {value => {\n        console.log(value);\n        return (\n          <DrawerNav\n            screensArray={[\n              {name: \"Profile\", component: ProfileStack},\n              {name: \"Second\", component: SecondScreen}\n            ]}\n            customContent={props => <ProfileDrawerContent {...props} onLogoutPressed = {value.logoutFunc}/>}\n          ></DrawerNav>\n        )\n      }}\n    </LoginContext.Consumer>\n  )\n}"]},"metadata":{},"sourceType":"module"}
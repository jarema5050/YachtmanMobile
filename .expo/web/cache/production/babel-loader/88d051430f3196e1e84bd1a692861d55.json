{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import Client from\"../networking\";import{apply}from\"../utils/whitelist\";import{toCamelCase}from\"../utils/camel\";import Auth0Error from\"./error\";function responseHandler(response){var exceptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(response.ok&&response.json){return toCamelCase(response.json,exceptions);}throw new Auth0Error(response);}var attributes=['name','nickname','picture','user_id','user_metadata','app_metadata','email','email_verified','given_name','family_name'];var Users=function(){function Users(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Users);this.client=new Client(options);if(!options.token){throw new Error('Missing token in parameters');}}_createClass(Users,[{key:\"getUser\",value:function getUser(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=apply({parameters:{id:{required:true}}},parameters);return this.client.get(\"/api/v2/users/\"+encodeURIComponent(payload.id)).then(function(response){return responseHandler(response,{attributes:attributes,whitelist:true,rootOnly:true});});}},{key:\"patchUser\",value:function patchUser(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=apply({parameters:{id:{required:true},metadata:{required:true}}},parameters);return this.client.patch(\"/api/v2/users/\"+encodeURIComponent(payload.id),{user_metadata:payload.metadata}).then(function(response){return responseHandler(response,{attributes:attributes,whitelist:true,rootOnly:true});});}}]);return Users;}();export{Users as default};","map":{"version":3,"sources":["/Users/sokolowski/Documents/Private Repositories/YachtmanMobile/node_modules/react-native-auth0/src/management/users.js"],"names":["Client","apply","toCamelCase","Auth0Error","responseHandler","response","exceptions","ok","json","attributes","Users","options","client","token","Error","parameters","payload","id","required","get","encodeURIComponent","then","whitelist","rootOnly","metadata","patch","user_metadata"],"mappings":"gIAAA,MAAOA,CAAAA,MAAP,qBACA,OAASC,KAAT,0BACA,OAASC,WAAT,sBACA,MAAOC,CAAAA,UAAP,eAEA,QAASC,CAAAA,eAAT,CAAyBC,QAAzB,CAAoD,IAAjBC,CAAAA,UAAiB,2DAAJ,EAAI,CAClD,GAAID,QAAQ,CAACE,EAAT,EAAeF,QAAQ,CAACG,IAA5B,CAAkC,CAChC,MAAON,CAAAA,WAAW,CAACG,QAAQ,CAACG,IAAV,CAAgBF,UAAhB,CAAlB,CACD,CACD,KAAM,IAAIH,CAAAA,UAAJ,CAAeE,QAAf,CAAN,CACD,CAED,GAAMI,CAAAA,UAAU,CAAG,CACjB,MADiB,CAEjB,UAFiB,CAGjB,SAHiB,CAIjB,SAJiB,CAKjB,eALiB,CAMjB,cANiB,CAOjB,OAPiB,CAQjB,gBARiB,CASjB,YATiB,CAUjB,aAViB,CAAnB,C,GAoBqBC,CAAAA,K,YACnB,gBAA0B,IAAdC,CAAAA,OAAc,2DAAJ,EAAI,6BACxB,KAAKC,MAAL,CAAc,GAAIZ,CAAAA,MAAJ,CAAWW,OAAX,CAAd,CACA,GAAI,CAACA,OAAO,CAACE,KAAb,CAAoB,CAClB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,6BAAV,CAAN,CACD,CACF,C,2DAYwB,IAAjBC,CAAAA,UAAiB,2DAAJ,EAAI,CACvB,GAAMC,CAAAA,OAAO,CAAGf,KAAK,CACnB,CACEc,UAAU,CAAE,CACVE,EAAE,CAAE,CAAEC,QAAQ,CAAE,IAAZ,CADM,CADd,CADmB,CAMnBH,UANmB,CAArB,CAQA,MAAO,MAAKH,MAAL,CACJO,GADI,kBACiBC,kBAAkB,CAACJ,OAAO,CAACC,EAAT,CADnC,EAEJI,IAFI,CAEC,SAAAhB,QAAQ,QACZD,CAAAA,eAAe,CAACC,QAAD,CAAW,CACxBI,UAAU,CAAVA,UADwB,CAExBa,SAAS,CAAE,IAFa,CAGxBC,QAAQ,CAAE,IAHc,CAAX,CADH,EAFT,CAAP,CASD,C,6CAa0B,IAAjBR,CAAAA,UAAiB,2DAAJ,EAAI,CACzB,GAAMC,CAAAA,OAAO,CAAGf,KAAK,CACnB,CACEc,UAAU,CAAE,CACVE,EAAE,CAAE,CAAEC,QAAQ,CAAE,IAAZ,CADM,CAEVM,QAAQ,CAAE,CAAEN,QAAQ,CAAE,IAAZ,CAFA,CADd,CADmB,CAOnBH,UAPmB,CAArB,CASA,MAAO,MAAKH,MAAL,CACJa,KADI,kBACmBL,kBAAkB,CAACJ,OAAO,CAACC,EAAT,CADrC,CACqD,CACxDS,aAAa,CAAEV,OAAO,CAACQ,QADiC,CADrD,EAIJH,IAJI,CAIC,SAAAhB,QAAQ,QACZD,CAAAA,eAAe,CAACC,QAAD,CAAW,CACxBI,UAAU,CAAVA,UADwB,CAExBa,SAAS,CAAE,IAFa,CAGxBC,QAAQ,CAAE,IAHc,CAAX,CADH,EAJT,CAAP,CAWD,C,4BAtEkBb,K","sourcesContent":["import Client from '../networking';\nimport { apply } from '../utils/whitelist';\nimport { toCamelCase } from '../utils/camel';\nimport Auth0Error from './error';\n\nfunction responseHandler(response, exceptions = {}) {\n  if (response.ok && response.json) {\n    return toCamelCase(response.json, exceptions);\n  }\n  throw new Auth0Error(response);\n}\n\nconst attributes = [\n  'name',\n  'nickname',\n  'picture',\n  'user_id',\n  'user_metadata',\n  'app_metadata',\n  'email',\n  'email_verified',\n  'given_name',\n  'family_name'\n];\n\n/**\n * Auth0 Management API User endpoints\n *\n * @export\n * @see https://auth0.com/docs/api/management/v2#!/Users/\n * @class Users\n */\nexport default class Users {\n  constructor(options = {}) {\n    this.client = new Client(options);\n    if (!options.token) {\n      throw new Error('Missing token in parameters');\n    }\n  }\n\n  /**\n   * Returns the user by identifier\n   *\n   * @param {Object} parameters get user by identifier parameters\n   * @param {String} parameters.id identifier of the user to obtain\n   * @returns {Promise}\n   * @see https://auth0.com/docs/api/management/v2#!/Users/get_users_by_id\n   *\n   * @memberof Users\n   */\n  getUser(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          id: { required: true }\n        }\n      },\n      parameters\n    );\n    return this.client\n      .get(`/api/v2/users/${encodeURIComponent(payload.id)}`)\n      .then(response =>\n        responseHandler(response, {\n          attributes,\n          whitelist: true,\n          rootOnly: true\n        })\n      );\n  }\n\n  /**\n   * Patch a user's `user_metadata`\n   *\n   * @param {Object} parameters patch user metadata parameters\n   * @param {String} parameters.id identifier of the user to patch\n   * @param {Object} parameters.metadata object with attributes to store in user_metadata.\n   * @returns {Promise}\n   * @see https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id\n   *\n   * @memberof Users\n   */\n  patchUser(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          id: { required: true },\n          metadata: { required: true }\n        }\n      },\n      parameters\n    );\n    return this.client\n      .patch(`/api/v2/users/${encodeURIComponent(payload.id)}`, {\n        user_metadata: payload.metadata\n      })\n      .then(response =>\n        responseHandler(response, {\n          attributes,\n          whitelist: true,\n          rootOnly: true\n        })\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
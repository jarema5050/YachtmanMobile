{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Client from \"../networking\";\nimport { apply } from \"../utils/whitelist\";\nimport { toCamelCase } from \"../utils/camel\";\nimport AuthError from \"./authError\";\nimport Auth0Error from \"./auth0Error\";\n\nfunction responseHandler(response) {\n  var exceptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (response.ok && response.json) {\n    return toCamelCase(response.json, exceptions);\n  }\n\n  throw new AuthError(response);\n}\n\nvar Auth = function () {\n  function Auth() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Auth);\n\n    this.client = new Client(options);\n    var clientId = options.clientId;\n\n    if (!clientId) {\n      throw new Error('Missing clientId in parameters');\n    }\n\n    this.domain = this.client.domain;\n    this.clientId = clientId;\n  }\n\n  _createClass(Auth, [{\n    key: \"authorizeUrl\",\n    value: function authorizeUrl() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var query = apply({\n        parameters: {\n          redirectUri: {\n            required: true,\n            toName: 'redirect_uri'\n          },\n          responseType: {\n            required: true,\n            toName: 'response_type'\n          },\n          state: {\n            required: true\n          }\n        },\n        whitelist: false\n      }, parameters);\n      return this.client.url('/authorize', _objectSpread(_objectSpread({}, query), {}, {\n        client_id: this.clientId\n      }), true);\n    }\n  }, {\n    key: \"logoutUrl\",\n    value: function logoutUrl() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var query = apply({\n        parameters: {\n          federated: {\n            required: false\n          },\n          clientId: {\n            required: false,\n            toName: 'client_id'\n          },\n          returnTo: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.url('/v2/logout', _objectSpread({}, query), true);\n    }\n  }, {\n    key: \"exchange\",\n    value: function exchange() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          code: {\n            required: true\n          },\n          verifier: {\n            required: true,\n            toName: 'code_verifier'\n          },\n          redirectUri: {\n            required: true,\n            toName: 'redirect_uri'\n          }\n        }\n      }, parameters);\n      return this.client.post('/oauth/token', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId,\n        grant_type: 'authorization_code'\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"exchangeNativeSocial\",\n    value: function exchangeNativeSocial() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          subjectToken: {\n            required: true,\n            toName: 'subject_token'\n          },\n          subjectTokenType: {\n            required: true,\n            toName: 'subject_token_type'\n          },\n          userProfile: {\n            required: false,\n            toName: 'user_profile'\n          },\n          audience: {\n            required: false\n          },\n          scope: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.post('/oauth/token', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId,\n        grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange'\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"passwordRealm\",\n    value: function passwordRealm() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          username: {\n            required: true\n          },\n          password: {\n            required: true\n          },\n          realm: {\n            required: true\n          },\n          audience: {\n            required: false\n          },\n          scope: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.post('/oauth/token', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId,\n        grant_type: 'http://auth0.com/oauth/grant-type/password-realm'\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"refreshToken\",\n    value: function refreshToken() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          refreshToken: {\n            required: true,\n            toName: 'refresh_token'\n          },\n          scope: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.post('/oauth/token', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId,\n        grant_type: 'refresh_token'\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"passwordlessWithEmail\",\n    value: function passwordlessWithEmail() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          email: {\n            required: true\n          },\n          send: {\n            required: false\n          },\n          authParams: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.post('/passwordless/start', _objectSpread(_objectSpread({}, payload), {}, {\n        connection: 'email',\n        client_id: this.clientId\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"passwordlessWithSMS\",\n    value: function passwordlessWithSMS() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          phoneNumber: {\n            required: true,\n            toName: 'phone_number'\n          },\n          send: {\n            required: false\n          },\n          authParams: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.post('/passwordless/start', _objectSpread(_objectSpread({}, payload), {}, {\n        connection: 'sms',\n        client_id: this.clientId\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"loginWithEmail\",\n    value: function loginWithEmail() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          email: {\n            required: true,\n            toName: 'username'\n          },\n          code: {\n            required: true,\n            toName: 'otp'\n          },\n          audience: {\n            required: false\n          },\n          scope: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.post('/oauth/token', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId,\n        realm: 'email',\n        grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp'\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"loginWithSMS\",\n    value: function loginWithSMS() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          phoneNumber: {\n            required: true,\n            toName: 'username'\n          },\n          code: {\n            required: true,\n            toName: 'otp'\n          },\n          audience: {\n            required: false\n          },\n          scope: {\n            required: false\n          }\n        }\n      }, parameters);\n      return this.client.post('/oauth/token', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId,\n        realm: 'sms',\n        grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp'\n      })).then(responseHandler);\n    }\n  }, {\n    key: \"revoke\",\n    value: function revoke() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          refreshToken: {\n            required: true,\n            toName: 'token'\n          }\n        }\n      }, parameters);\n      return this.client.post('/oauth/revoke', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId\n      })).then(function (response) {\n        if (response.ok) {\n          return {};\n        }\n\n        throw new AuthError(response);\n      });\n    }\n  }, {\n    key: \"userInfo\",\n    value: function userInfo() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          token: {\n            required: true\n          }\n        }\n      }, parameters);\n      var _this$client = this.client,\n          baseUrl = _this$client.baseUrl,\n          telemetry = _this$client.telemetry;\n      var client = new Client({\n        baseUrl: baseUrl,\n        telemetry: telemetry,\n        token: payload.token\n      });\n      var claims = ['sub', 'name', 'given_name', 'family_name', 'middle_name', 'nickname', 'preferred_username', 'profile', 'picture', 'website', 'email', 'email_verified', 'gender', 'birthdate', 'zoneinfo', 'locale', 'phone_number', 'phone_number_verified', 'address', 'updated_at'];\n      return client.get('/userinfo').then(function (response) {\n        return responseHandler(response, {\n          attributes: claims,\n          whitelist: true\n        });\n      });\n    }\n  }, {\n    key: \"resetPassword\",\n    value: function resetPassword() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          email: {\n            required: true\n          },\n          connection: {\n            required: true\n          }\n        }\n      }, parameters);\n      return this.client.post('/dbconnections/change_password', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId\n      })).then(function (response) {\n        if (response.ok) {\n          return {};\n        }\n\n        throw new AuthError(response);\n      });\n    }\n  }, {\n    key: \"createUser\",\n    value: function createUser() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var payload = apply({\n        parameters: {\n          email: {\n            required: true\n          },\n          password: {\n            required: true\n          },\n          connection: {\n            required: true\n          },\n          username: {\n            required: false\n          },\n          metadata: {\n            required: false,\n            toName: 'user_metadata'\n          }\n        }\n      }, parameters);\n      return this.client.post('/dbconnections/signup', _objectSpread(_objectSpread({}, payload), {}, {\n        client_id: this.clientId\n      })).then(function (response) {\n        if (response.ok && response.json) {\n          return toCamelCase(response.json);\n        }\n\n        throw new Auth0Error(response);\n      });\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/Users/sokolowski/Documents/Private Repositories/YachtmanMobile/node_modules/react-native-auth0/src/auth/index.js"],"names":["Client","apply","toCamelCase","AuthError","Auth0Error","responseHandler","response","exceptions","ok","json","Auth","options","client","clientId","Error","domain","parameters","query","redirectUri","required","toName","responseType","state","whitelist","url","client_id","federated","returnTo","payload","code","verifier","post","grant_type","then","subjectToken","subjectTokenType","userProfile","audience","scope","username","password","realm","refreshToken","email","send","authParams","connection","phoneNumber","token","baseUrl","telemetry","claims","get","attributes","metadata"],"mappings":"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","sourcesContent":["import Client from '../networking';\nimport {apply} from '../utils/whitelist';\nimport {toCamelCase} from '../utils/camel';\nimport AuthError from './authError';\nimport Auth0Error from './auth0Error';\n\nfunction responseHandler(response, exceptions = {}) {\n  if (response.ok && response.json) {\n    return toCamelCase(response.json, exceptions);\n  }\n  throw new AuthError(response);\n}\n\n/**\n * Auth0 Auth API\n *\n * @export Auth\n * @see https://auth0.com/docs/api/authentication\n * @class Auth\n */\nexport default class Auth {\n  constructor(options = {}) {\n    this.client = new Client(options);\n    const {clientId} = options;\n    if (!clientId) {\n      throw new Error('Missing clientId in parameters');\n    }\n    this.domain = this.client.domain;\n    this.clientId = clientId;\n  }\n\n  /**\n   * Builds the full authorize endpoint url in the Authorization Server (AS) with given parameters.\n   *\n   * @param {Object} parameters parameters to send to `/authorize`\n   * @param {String} parameters.responseType type of the response to get from `/authorize`.\n   * @param {String} parameters.redirectUri where the AS will redirect back after success or failure.\n   * @param {String} parameters.state random string to prevent CSRF attacks.\n   * @returns {String} authorize url with specified parameters to redirect to for AuthZ/AuthN.\n   * @see https://auth0.com/docs/api/authentication#authorize-client\n   *\n   * @memberof Auth\n   */\n  authorizeUrl(parameters = {}) {\n    const query = apply(\n      {\n        parameters: {\n          redirectUri: {required: true, toName: 'redirect_uri'},\n          responseType: {required: true, toName: 'response_type'},\n          state: {required: true},\n        },\n        whitelist: false,\n      },\n      parameters,\n    );\n    return this.client.url(\n      '/authorize',\n      {...query, client_id: this.clientId},\n      true,\n    );\n  }\n\n  /**\n   * Builds the full logout endpoint url in the Authorization Server (AS) with given parameters.\n   *\n   * @param {Object} parameters parameters to send to `/v2/logout`\n   * @param {Boolean} [parameters.federated] if the logout should include removing session for federated IdP.\n   * @param {String} [parameters.clientId] client identifier of the one requesting the logout\n   * @param {String} [parameters.returnTo] url where the user is redirected to after logout. It must be declared in you Auth0 Dashboard\n   * @returns {String} logout url with specified parameters\n   * @see https://auth0.com/docs/api/authentication#logout\n   *\n   * @memberof Auth\n   */\n  logoutUrl(parameters = {}) {\n    const query = apply(\n      {\n        parameters: {\n          federated: {required: false},\n          clientId: {required: false, toName: 'client_id'},\n          returnTo: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client.url('/v2/logout', {...query}, true);\n  }\n\n  /**\n   * Exchanges a code obtained via `/authorize` (w/PKCE) for the user's tokens\n   *\n   * @param {Object} parameters parameters used to obtain tokens from a code\n   * @param {String} parameters.code code returned by `/authorize`.\n   * @param {String} parameters.redirectUri original redirectUri used when calling `/authorize`.\n   * @param {String} parameters.verifier value used to generate the code challenge sent to `/authorize`.\n   * @returns {Promise}\n   * @see https://auth0.com/docs/api-auth/grant/authorization-code-pkce\n   *\n   * @memberof Auth\n   */\n  exchange(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          code: {required: true},\n          verifier: {required: true, toName: 'code_verifier'},\n          redirectUri: {required: true, toName: 'redirect_uri'},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'authorization_code',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Exchanges an external token obtained via a native social authentication solution for the user's tokens\n   *\n   * @param {Object} parameters parameters used to obtain user tokens from an external provider's token\n   * @param {String} parameters.subjectToken token returned by the native social authentication solution\n   * @param {String} parameters.subjectTokenType identifier that indicates the native social authentication solution\n   * @param {Object} [parameters.userProfile] additional profile attributes to set or override, only on select native social authentication solutions\n   * @param {String} [parameters.audience] API audience to request\n   * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n   * @returns {Promise}\n   *\n   * @see https://auth0.com/docs/api/authentication#token-exchange-for-native-social\n   *\n   * @memberof Auth\n   */\n  exchangeNativeSocial(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          subjectToken: {required: true, toName: 'subject_token'},\n          subjectTokenType: {required: true, toName: 'subject_token_type'},\n          userProfile: {required: false, toName: 'user_profile'},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Performs Auth with user credentials using the Password Realm Grant\n   *\n   * @param {Object} parameters password realm parameters\n   * @param {String} parameters.username user's username or email\n   * @param {String} parameters.password user's password\n   * @param {String} parameters.realm name of the Realm where to Auth (or connection name)\n   * @param {String} [parameters.audience] identifier of Resource Server (RS) to be included as audience (aud claim) of the issued access token\n   * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n   * @returns {Promise}\n   * @see https://auth0.com/docs/api-auth/grant/password#realm-support\n   *\n   * @memberof Auth\n   */\n  passwordRealm(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          username: {required: true},\n          password: {required: true},\n          realm: {required: true},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'http://auth0.com/oauth/grant-type/password-realm',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Obtain new tokens using the Refresh Token obtained during Auth (requesting `offline_access` scope)\n   *\n   * @param {Object} parameters refresh token parameters\n   * @param {String} parameters.refreshToken user's issued refresh token\n   * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n   * @returns {Promise}\n   * @see https://auth0.com/docs/tokens/refresh-token/current#use-a-refresh-token\n   *\n   * @memberof Auth\n   */\n  refreshToken(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          refreshToken: {required: true, toName: 'refresh_token'},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'refresh_token',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Starts the Passworldess flow with an email connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.email the email to send the link/code to\n   * @param {String} parameters.send the passwordless strategy, either 'link' or 'code'\n   * @param {String} parameters.authParams optional parameters, used when strategy is 'linḱ'\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  passwordlessWithEmail(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true},\n          send: {required: false},\n          authParams: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/passwordless/start', {\n        ...payload,\n        connection: 'email',\n        client_id: this.clientId,\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Starts the Passworldess flow with an SMS connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.phoneNumber the phone number to send the link/code to\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  passwordlessWithSMS(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          phoneNumber: {required: true, toName: 'phone_number'},\n          send: {required: false},\n          authParams: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/passwordless/start', {\n        ...payload,\n        connection: 'sms',\n        client_id: this.clientId,\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Finishes the Passworldess authentication with an email connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.email the email where the link/code was received\n   * @param {String} parameters.code the code numeric value (OTP)\n   * @param {String} parameters.audience optional API audience to request\n   * @param {String} parameters.scope optional scopes to request\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  loginWithEmail(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true, toName: 'username'},\n          code: {required: true, toName: 'otp'},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        realm: 'email',\n        grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Finishes the Passworldess authentication with an SMS connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.phoneNumber the phone number where the code was received\n   * @param {String} parameters.code the code numeric value (OTP)\n   * @param {String} parameters.audience optional API audience to request\n   * @param {String} parameters.scope optional scopes to request\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  loginWithSMS(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          phoneNumber: {required: true, toName: 'username'},\n          code: {required: true, toName: 'otp'},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        realm: 'sms',\n        grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Revoke an issued refresh token\n   *\n   * @param {Object} parameters revoke token parameters\n   * @param {String} parameters.refreshToken user's issued refresh token\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  revoke(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          refreshToken: {required: true, toName: 'token'},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/revoke', {\n        ...payload,\n        client_id: this.clientId,\n      })\n      .then(response => {\n        if (response.ok) {\n          return {};\n        }\n        throw new AuthError(response);\n      });\n  }\n\n  /**\n   * Return user information using an access token\n   *\n   * @param {Object} parameters user info parameters\n   * @param {String} parameters.token user's access token\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  userInfo(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          token: {required: true},\n        },\n      },\n      parameters,\n    );\n    const {baseUrl, telemetry} = this.client;\n    const client = new Client({baseUrl, telemetry, token: payload.token});\n    const claims = [\n      'sub',\n      'name',\n      'given_name',\n      'family_name',\n      'middle_name',\n      'nickname',\n      'preferred_username',\n      'profile',\n      'picture',\n      'website',\n      'email',\n      'email_verified',\n      'gender',\n      'birthdate',\n      'zoneinfo',\n      'locale',\n      'phone_number',\n      'phone_number_verified',\n      'address',\n      'updated_at',\n    ];\n    return client\n      .get('/userinfo')\n      .then(response =>\n        responseHandler(response, {attributes: claims, whitelist: true}),\n      );\n  }\n\n  /**\n   * Request an email with instructions to change password of a user\n   *\n   * @param {Object} parameters reset password parameters\n   * @param {String} parameters.email user's email\n   * @param {String} parameters.connection name of the connection of the user\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  resetPassword(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true},\n          connection: {required: true},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/dbconnections/change_password', {\n        ...payload,\n        client_id: this.clientId,\n      })\n      .then(response => {\n        if (response.ok) {\n          return {};\n        }\n        throw new AuthError(response);\n      });\n  }\n\n  /**\n   *\n   *\n   * @param {Object} parameters create user parameters\n   * @param {String} parameters.email user's email\n   * @param {String} [parameters.username] user's username\n   * @param {String} parameters.password user's password\n   * @param {String} parameters.connection name of the database connection where to create the user\n   * @param {String} [parameters.metadata] additional user information that will be stored in `user_metadata`\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  createUser(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true},\n          password: {required: true},\n          connection: {required: true},\n          username: {required: false},\n          metadata: {required: false, toName: 'user_metadata'},\n        },\n      },\n      parameters,\n    );\n\n    return this.client\n      .post('/dbconnections/signup', {\n        ...payload,\n        client_id: this.clientId,\n      })\n      .then(response => {\n        if (response.ok && response.json) {\n          return toCamelCase(response.json);\n        }\n        throw new Auth0Error(response);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
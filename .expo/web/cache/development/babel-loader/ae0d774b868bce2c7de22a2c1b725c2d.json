{"ast":null,"code":"import { BigInteger } from 'jsbn';\nimport SHA256 from 'crypto-js/sha256';\nvar digestInfoHead = {\n  sha256: '3031300d060960864801650304020105000420'\n};\nvar digestAlgs = {\n  sha256: SHA256\n};\n\nfunction RSAVerifier(modulus, exp) {\n  this.n = null;\n  this.e = 0;\n\n  if (modulus && modulus.length > 0 && exp && exp.length > 0) {\n    this.n = new BigInteger(modulus, 16);\n    this.e = parseInt(exp, 16);\n  } else {\n    throw new Error('Invalid key data');\n  }\n}\n\nfunction getAlgorithmFromDigest(hDigestInfo) {\n  for (var algName in digestInfoHead) {\n    var head = digestInfoHead[algName];\n    var len = head.length;\n\n    if (hDigestInfo.substring(0, len) === head) {\n      return {\n        alg: algName,\n        hash: hDigestInfo.substring(len)\n      };\n    }\n  }\n\n  return [];\n}\n\nRSAVerifier.prototype.verify = function (msg, encodedSignature) {\n  var decodedSignature = encodedSignature.replace(/[^0-9a-f]|[\\s\\n]]/gi, '');\n  var signature = new BigInteger(decodedSignature, 16);\n\n  if (signature.bitLength() > this.n.bitLength()) {\n    return false;\n  }\n\n  var decryptedSignature = signature.modPowInt(this.e, this.n);\n  var digest = decryptedSignature.toString(16).replace(/^1f+00/, '');\n  var digestInfo = getAlgorithmFromDigest(digest);\n\n  if (digestInfo.length === 0) {\n    return false;\n  }\n\n  if (!digestAlgs.hasOwnProperty(digestInfo.alg)) {\n    return false;\n  }\n\n  var msgHash = digestAlgs[digestInfo.alg](msg).toString();\n  return digestInfo.hash === msgHash;\n};\n\nexport default RSAVerifier;","map":{"version":3,"sources":["/Users/sokolowski/Documents/Private Repositories/YachtmanMobile/node_modules/react-native-auth0/src/jwt/rsa-verifier.js"],"names":["BigInteger","SHA256","digestInfoHead","sha256","digestAlgs","RSAVerifier","modulus","exp","n","e","length","parseInt","Error","getAlgorithmFromDigest","hDigestInfo","algName","head","len","substring","alg","hash","prototype","verify","msg","encodedSignature","decodedSignature","replace","signature","bitLength","decryptedSignature","modPowInt","digest","toString","digestInfo","hasOwnProperty","msgHash"],"mappings":"AAMA,SAAQA,UAAR,QAAyB,MAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE;AADa,CAAvB;AAIA,IAAMC,UAAU,GAAG;AACjBD,EAAAA,MAAM,EAAEF;AADS,CAAnB;;AAIA,SAASI,WAAT,CAAqBC,OAArB,EAA8BC,GAA9B,EAAmC;AACjC,OAAKC,CAAL,GAAS,IAAT;AACA,OAAKC,CAAL,GAAS,CAAT;;AAEA,MAAIH,OAAO,IAAIA,OAAO,CAACI,MAAR,GAAiB,CAA5B,IAAiCH,GAAjC,IAAwCA,GAAG,CAACG,MAAJ,GAAa,CAAzD,EAA4D;AAC1D,SAAKF,CAAL,GAAS,IAAIR,UAAJ,CAAeM,OAAf,EAAwB,EAAxB,CAAT;AACA,SAAKG,CAAL,GAASE,QAAQ,CAACJ,GAAD,EAAM,EAAN,CAAjB;AACD,GAHD,MAGO;AACL,UAAM,IAAIK,KAAJ,CAAU,kBAAV,CAAN;AACD;AACF;;AAED,SAASC,sBAAT,CAAgCC,WAAhC,EAA6C;AAC3C,OAAK,IAAIC,OAAT,IAAoBb,cAApB,EAAoC;AAClC,QAAMc,IAAI,GAAGd,cAAc,CAACa,OAAD,CAA3B;AACA,QAAME,GAAG,GAAGD,IAAI,CAACN,MAAjB;;AAEA,QAAII,WAAW,CAACI,SAAZ,CAAsB,CAAtB,EAAyBD,GAAzB,MAAkCD,IAAtC,EAA4C;AAC1C,aAAO;AACLG,QAAAA,GAAG,EAAEJ,OADA;AAELK,QAAAA,IAAI,EAAEN,WAAW,CAACI,SAAZ,CAAsBD,GAAtB;AAFD,OAAP;AAID;AACF;;AACD,SAAO,EAAP;AACD;;AAEDZ,WAAW,CAACgB,SAAZ,CAAsBC,MAAtB,GAA+B,UAASC,GAAT,EAAcC,gBAAd,EAAgC;AAC7D,MAAMC,gBAAgB,GAAGD,gBAAgB,CAACE,OAAjB,CAAyB,qBAAzB,EAAgD,EAAhD,CAAzB;AAEA,MAAMC,SAAS,GAAG,IAAI3B,UAAJ,CAAeyB,gBAAf,EAAiC,EAAjC,CAAlB;;AACA,MAAIE,SAAS,CAACC,SAAV,KAAwB,KAAKpB,CAAL,CAAOoB,SAAP,EAA5B,EAAgD;AAE9C,WAAO,KAAP;AACD;;AAED,MAAMC,kBAAkB,GAAGF,SAAS,CAACG,SAAV,CAAoB,KAAKrB,CAAzB,EAA4B,KAAKD,CAAjC,CAA3B;AACA,MAAMuB,MAAM,GAAGF,kBAAkB,CAACG,QAAnB,CAA4B,EAA5B,EAAgCN,OAAhC,CAAwC,QAAxC,EAAkD,EAAlD,CAAf;AAEA,MAAMO,UAAU,GAAGpB,sBAAsB,CAACkB,MAAD,CAAzC;;AACA,MAAIE,UAAU,CAACvB,MAAX,KAAsB,CAA1B,EAA6B;AAE3B,WAAO,KAAP;AACD;;AAED,MAAI,CAACN,UAAU,CAAC8B,cAAX,CAA0BD,UAAU,CAACd,GAArC,CAAL,EAAgD;AAE9C,WAAO,KAAP;AACD;;AAED,MAAMgB,OAAO,GAAG/B,UAAU,CAAC6B,UAAU,CAACd,GAAZ,CAAV,CAA2BI,GAA3B,EAAgCS,QAAhC,EAAhB;AACA,SAAOC,UAAU,CAACb,IAAX,KAAoBe,OAA3B;AACD,CAzBD;;AA2BA,eAAe9B,WAAf","sourcesContent":["/*\nBased on the work of Tom Wu\nhttp://www-cs-students.stanford.edu/~tjw/jsbn/\nhttp://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE\n*/\n\nimport {BigInteger} from 'jsbn';\nimport SHA256 from 'crypto-js/sha256';\n\nconst digestInfoHead = {\n  sha256: '3031300d060960864801650304020105000420',\n};\n\nconst digestAlgs = {\n  sha256: SHA256,\n};\n\nfunction RSAVerifier(modulus, exp) {\n  this.n = null;\n  this.e = 0;\n\n  if (modulus && modulus.length > 0 && exp && exp.length > 0) {\n    this.n = new BigInteger(modulus, 16);\n    this.e = parseInt(exp, 16);\n  } else {\n    throw new Error('Invalid key data');\n  }\n}\n\nfunction getAlgorithmFromDigest(hDigestInfo) {\n  for (let algName in digestInfoHead) {\n    const head = digestInfoHead[algName];\n    const len = head.length;\n\n    if (hDigestInfo.substring(0, len) === head) {\n      return {\n        alg: algName,\n        hash: hDigestInfo.substring(len),\n      };\n    }\n  }\n  return [];\n}\n\nRSAVerifier.prototype.verify = function(msg, encodedSignature) {\n  const decodedSignature = encodedSignature.replace(/[^0-9a-f]|[\\s\\n]]/gi, '');\n\n  const signature = new BigInteger(decodedSignature, 16);\n  if (signature.bitLength() > this.n.bitLength()) {\n    //Signature does not match with the key modulus.\n    return false;\n  }\n\n  const decryptedSignature = signature.modPowInt(this.e, this.n);\n  const digest = decryptedSignature.toString(16).replace(/^1f+00/, '');\n\n  const digestInfo = getAlgorithmFromDigest(digest);\n  if (digestInfo.length === 0) {\n    //Hashing algorithm is not found\n    return false;\n  }\n\n  if (!digestAlgs.hasOwnProperty(digestInfo.alg)) {\n    //Hashing algorithm is not supported\n    return false;\n  }\n\n  const msgHash = digestAlgs[digestInfo.alg](msg).toString();\n  return digestInfo.hash === msgHash;\n};\n\nexport default RSAVerifier;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport defaults from \"./telemetry\";\nimport _url from 'url';\nimport base64 from 'base-64';\n\nvar Client = function () {\n  function Client(options) {\n    _classCallCheck(this, Client);\n\n    var baseUrl = options.baseUrl,\n        _options$telemetry = options.telemetry,\n        telemetry = _options$telemetry === void 0 ? {} : _options$telemetry,\n        token = options.token;\n\n    if (!baseUrl) {\n      throw new Error('Missing Auth0 domain');\n    }\n\n    var _telemetry$name = telemetry.name,\n        name = _telemetry$name === void 0 ? defaults.name : _telemetry$name,\n        _telemetry$version = telemetry.version,\n        version = _telemetry$version === void 0 ? defaults.version : _telemetry$version;\n    this.telemetry = {\n      name: name,\n      version: version\n    };\n\n    if (name !== defaults.name) {\n      this.telemetry.env = {};\n      this.telemetry.env[defaults.name] = defaults.version;\n    }\n\n    var parsed = _url.parse(baseUrl);\n\n    this.baseUrl = parsed.protocol === 'https:' || parsed.protocol === 'http:' ? baseUrl : \"https://\" + baseUrl;\n    this.domain = parsed.hostname || baseUrl;\n\n    if (token) {\n      this.bearer = \"Bearer \" + token;\n    }\n  }\n\n  _createClass(Client, [{\n    key: \"post\",\n    value: function post(path, body) {\n      return this.request('POST', this.url(path), body);\n    }\n  }, {\n    key: \"patch\",\n    value: function patch(path, body) {\n      return this.request('PATCH', this.url(path), body);\n    }\n  }, {\n    key: \"get\",\n    value: function get(path, query) {\n      return this.request('GET', this.url(path, query));\n    }\n  }, {\n    key: \"url\",\n    value: function url(path, query) {\n      var includeTelemetry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var endpoint = _url.resolve(this.baseUrl, path);\n\n      if (query && query.length !== 0 || includeTelemetry) {\n        var parsed = _url.parse(endpoint);\n\n        parsed.query = query || {};\n\n        if (includeTelemetry) {\n          parsed.query.auth0Client = this._encodedTelemetry();\n        }\n\n        endpoint = _url.format(parsed);\n      }\n\n      return endpoint;\n    }\n  }, {\n    key: \"request\",\n    value: function request(method, url, body) {\n      var options = {\n        method: method,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          'Auth0-Client': this._encodedTelemetry()\n        }\n      };\n\n      if (this.bearer) {\n        options.headers.Authorization = this.bearer;\n      }\n\n      if (body) {\n        options.body = JSON.stringify(body);\n      }\n\n      return fetch(url, options).then(function (response) {\n        var payload = {\n          status: response.status,\n          ok: response.ok,\n          headers: response.headers\n        };\n        return response.json().then(function (json) {\n          return _objectSpread(_objectSpread({}, payload), {}, {\n            json: json\n          });\n        }).catch(function () {\n          return response.text().then(function (text) {\n            return _objectSpread(_objectSpread({}, payload), {}, {\n              text: text\n            });\n          }).catch(function () {\n            return _objectSpread(_objectSpread({}, payload), {}, {\n              text: response.statusText\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_encodedTelemetry\",\n    value: function _encodedTelemetry() {\n      return base64.encode(JSON.stringify(this.telemetry));\n    }\n  }]);\n\n  return Client;\n}();\n\nexport { Client as default };","map":{"version":3,"sources":["/Users/sokolowski/Documents/Private Repositories/YachtmanMobile/node_modules/react-native-auth0/src/networking/index.js"],"names":["defaults","url","base64","Client","options","baseUrl","telemetry","token","Error","name","version","env","parsed","parse","protocol","domain","hostname","bearer","path","body","request","query","includeTelemetry","endpoint","resolve","length","auth0Client","_encodedTelemetry","format","method","headers","Accept","Authorization","JSON","stringify","fetch","then","response","payload","status","ok","json","catch","text","statusText","encode"],"mappings":"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","sourcesContent":["import defaults from './telemetry';\nimport url from 'url';\nimport base64 from 'base-64';\n\nexport default class Client {\n  constructor(options) {\n    const { baseUrl, telemetry = {}, token } = options;\n    if (!baseUrl) {\n      throw new Error('Missing Auth0 domain');\n    }\n    const { name = defaults.name, version = defaults.version } = telemetry;\n    this.telemetry = { name, version };\n    if (name !== defaults.name) {\n      this.telemetry.env = {};\n      this.telemetry.env[defaults.name] = defaults.version;\n    }\n    const parsed = url.parse(baseUrl);\n    this.baseUrl =\n      parsed.protocol === 'https:' || parsed.protocol === 'http:'\n        ? baseUrl\n        : `https://${baseUrl}`;\n    this.domain = parsed.hostname || baseUrl;\n    if (token) {\n      this.bearer = `Bearer ${token}`;\n    }\n  }\n\n  post(path, body) {\n    return this.request('POST', this.url(path), body);\n  }\n\n  patch(path, body) {\n    return this.request('PATCH', this.url(path), body);\n  }\n\n  get(path, query) {\n    return this.request('GET', this.url(path, query));\n  }\n\n  url(path, query, includeTelemetry = false) {\n    let endpoint = url.resolve(this.baseUrl, path);\n    if ((query && query.length !== 0) || includeTelemetry) {\n      const parsed = url.parse(endpoint);\n      parsed.query = query || {};\n      if (includeTelemetry) {\n        parsed.query.auth0Client = this._encodedTelemetry();\n      }\n      endpoint = url.format(parsed);\n    }\n    return endpoint;\n  }\n\n  request(method, url, body) {\n    const options = {\n      method: method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Auth0-Client': this._encodedTelemetry(),\n      },\n    };\n    if (this.bearer) {\n      options.headers.Authorization = this.bearer;\n    }\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n    return fetch(url, options).then(response => {\n      const payload = {\n        status: response.status,\n        ok: response.ok,\n        headers: response.headers,\n      };\n      return response\n        .json()\n        .then(json => {\n          return { ...payload, json };\n        })\n        .catch(() => {\n          return response\n            .text()\n            .then(text => {\n              return { ...payload, text };\n            })\n            .catch(() => {\n              return { ...payload, text: response.statusText };\n            });\n        });\n    });\n  }\n\n  _encodedTelemetry() {\n    return base64.encode(JSON.stringify(this.telemetry));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/jedrzej/Documents/GitHub/YachtmanMobile/services/Authentication.js\";\nimport * as AuthSession from \"expo-auth-session\";\nimport jwtDecode from \"jwt-decode\";\nimport React, { useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from 'react-native-elements';\nimport AsyncStorage from '@react-native-community/async-storage';\n\nvar credentialsModule = require(\"./AuthCredentials\");\n\nvar auth0ClientId = credentialsModule.auth0ClientId;\nvar authorizationEndpoint = credentialsModule.domain + \"/authorize\";\nvar useProxy = Platform.select({\n  web: false,\n  default: true\n});\nvar redirectUri = AuthSession.makeRedirectUri({\n  useProxy: useProxy\n});\nexport default function Authentication(_ref) {\n  var buttonParams = _ref.buttonParams,\n      task = _ref.task;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      name = _React$useState2[0],\n      setName = _React$useState2[1];\n\n  var _AuthSession$useAuthR = AuthSession.useAuthRequest({\n    redirectUri: redirectUri,\n    clientId: auth0ClientId,\n    responseType: \"id_token\",\n    scopes: [\"openid\", \"profile\"],\n    extraParams: {\n      nonce: \"nonce\"\n    }\n  }, {\n    authorizationEndpoint: authorizationEndpoint\n  }),\n      _AuthSession$useAuthR2 = _slicedToArray(_AuthSession$useAuthR, 3),\n      request = _AuthSession$useAuthR2[0],\n      result = _AuthSession$useAuthR2[1],\n      promptAsync = _AuthSession$useAuthR2[2];\n\n  console.log(\"Redirect URL: \" + redirectUri);\n\n  var storeJwt = function storeJwt(value) {\n    var jsonValue;\n    return _regeneratorRuntime.async(function storeJwt$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            jsonValue = JSON.stringify(value);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@auth_jwt', jsonValue));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"Storing JWT token failed -\" + _context.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  React.useEffect(function () {\n    if (result) {\n      if (result.error) {\n        Alert.alert(\"Authentication error\", result.params.error_description || \"something went wrong\");\n        return;\n      }\n\n      if (result.type === \"success\") {\n        var jwtToken = result.params.id_token;\n        var decoded = jwtDecode(jwtToken);\n        console.log(decoded);\n        var _name = decoded.name;\n        storeJwt(decoded);\n        task();\n        setName(_name);\n      }\n    }\n  }, [result]);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, name ? React.createElement(Text, {\n    style: styles.containerBottom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"You are logged in, \", name, \"!\") : React.createElement(Button, {\n    disabled: !request,\n    buttonStyle: buttonParams.styleBtnBody,\n    titleStyle: buttonParams.styleBtnTitle,\n    title: buttonParams.titleTxt,\n    onPress: function onPress() {\n      return promptAsync({\n        useProxy: useProxy\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    textAlign: \"center\",\n    marginTop: 40\n  }\n});","map":{"version":3,"sources":["/Users/jedrzej/Documents/GitHub/YachtmanMobile/services/Authentication.js"],"names":["AuthSession","jwtDecode","React","useState","Button","AsyncStorage","credentialsModule","require","auth0ClientId","authorizationEndpoint","domain","useProxy","Platform","select","web","default","redirectUri","makeRedirectUri","Authentication","buttonParams","task","name","setName","useAuthRequest","clientId","responseType","scopes","extraParams","nonce","request","result","promptAsync","console","log","storeJwt","value","jsonValue","JSON","stringify","setItem","message","useEffect","error","Alert","alert","params","error_description","type","jwtToken","id_token","decoded","styles","containerBottom","styleBtnBody","styleBtnTitle","titleTxt","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","title","fontSize","textAlign","marginTop"],"mappings":";;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAQA,IAAMC,iBAAiB,GAAGC,OAAO,qBAAjC;;AAEA,IAAMC,aAAa,GAAGF,iBAAiB,CAACE,aAAxC;AACA,IAAMC,qBAAqB,GAAGH,iBAAiB,CAACI,MAAlB,GAA2B,YAAzD;AAEA,IAAMC,QAAQ,GAAGC,QAAQ,CAACC,MAAT,CAAgB;AAAEC,EAAAA,GAAG,EAAE,KAAP;AAAcC,EAAAA,OAAO,EAAE;AAAvB,CAAhB,CAAjB;AACA,IAAMC,WAAW,GAAGhB,WAAW,CAACiB,eAAZ,CAA4B;AAAEN,EAAAA,QAAQ,EAARA;AAAF,CAA5B,CAApB;AAEA,eAAe,SAASO,cAAT,OAA8C;AAAA,MAArBC,YAAqB,QAArBA,YAAqB;AAAA,MAAPC,IAAO,QAAPA,IAAO;;AAAA,wBACnClB,KAAK,CAACC,QAAN,CAAe,IAAf,CADmC;AAAA;AAAA,MACpDkB,IADoD;AAAA,MAC9CC,OAD8C;;AAAA,8BAGpBtB,WAAW,CAACuB,cAAZ,CACrC;AACEP,IAAAA,WAAW,EAAXA,WADF;AAEEQ,IAAAA,QAAQ,EAAEhB,aAFZ;AAIEiB,IAAAA,YAAY,EAAE,UAJhB;AAMEC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,CANV;AAOEC,IAAAA,WAAW,EAAE;AAEXC,MAAAA,KAAK,EAAE;AAFI;AAPf,GADqC,EAarC;AAAEnB,IAAAA,qBAAqB,EAArBA;AAAF,GAbqC,CAHoB;AAAA;AAAA,MAGpDoB,OAHoD;AAAA,MAG3CC,MAH2C;AAAA,MAGnCC,WAHmC;;AAqB3DC,EAAAA,OAAO,CAACC,GAAR,oBAA6BjB,WAA7B;;AAEA,MAAMkB,QAAQ,GAAG,SAAXA,QAAW,CAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,YAAAA,SAFO,GAEKC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAFL;AAAA;AAAA,6CAGP9B,YAAY,CAACkC,OAAb,CAAqB,WAArB,EAAkCH,SAAlC,CAHO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKbJ,YAAAA,OAAO,CAACC,GAAR,CAAY,+BAA6B,YAAEO,OAA3C;;AALa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AASAtC,EAAAA,KAAK,CAACuC,SAAN,CAAgB,YAAM;AACpB,QAAIX,MAAJ,EAAY;AACV,UAAIA,MAAM,CAACY,KAAX,EAAkB;AAChBC,QAAAA,KAAK,CAACC,KAAN,CACE,sBADF,EAEEd,MAAM,CAACe,MAAP,CAAcC,iBAAd,IAAmC,sBAFrC;AAIA;AACD;;AACD,UAAIhB,MAAM,CAACiB,IAAP,KAAgB,SAApB,EAA+B;AAE7B,YAAMC,QAAQ,GAAGlB,MAAM,CAACe,MAAP,CAAcI,QAA/B;AACA,YAAMC,OAAO,GAAGjD,SAAS,CAAC+C,QAAD,CAAzB;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAYiB,OAAZ;AAJ6B,YAKrB7B,KALqB,GAKZ6B,OALY,CAKrB7B,IALqB;AAM7Ba,QAAAA,QAAQ,CAACgB,OAAD,CAAR;AACA9B,QAAAA,IAAI;AACJE,QAAAA,OAAO,CAACD,KAAD,CAAP;AACD;AACF;AACF,GApBD,EAoBG,CAACS,MAAD,CApBH;AAsBA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,IAAI,GACH,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE8B,MAAM,CAACC,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAyD/B,IAAzD,MADG,GAGH,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAE,CAACQ,OADb;AAEE,IAAA,WAAW,EAAGV,YAAY,CAACkC,YAF7B;AAGE,IAAA,UAAU,EAAIlC,YAAY,CAACmC,aAH7B;AAIE,IAAA,KAAK,EAAGnC,YAAY,CAACoC,QAJvB;AAKE,IAAA,OAAO,EAAE;AAAA,aAAMxB,WAAW,CAAC;AAAEpB,QAAAA,QAAQ,EAARA;AAAF,OAAD,CAAjB;AAAA,KALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF;AAeD;AAED,IAAMwC,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,SAAS,EAAE;AAHN;AAPwB,CAAlB,CAAf","sourcesContent":["import * as AuthSession from \"expo-auth-session\";\nimport jwtDecode from \"jwt-decode\";\nimport React, { useState } from \"react\";\nimport { Alert, Platform, StyleSheet, Text, View } from \"react-native\";\nimport { Button } from 'react-native-elements';\nimport AsyncStorage from '@react-native-community/async-storage';\n// You need to swap out the Auth0 client id and domain with the one from your Auth0 client.\n// In your Auth0 client, you need to also add a url to your authorized redirect urls.\n//\n// For this application, I added https://auth.expo.io/@arielweinberger/with-auth0 because I am\n// signed in as the \"arielweinberger\" account on Expo and the name/slug for this app is \"with-auth0\".\n//\n// You can open this app in the Expo client and check your logs to find out your redirect URL.\nconst credentialsModule = require('./AuthCredentials');\n\nconst auth0ClientId = credentialsModule.auth0ClientId;\nconst authorizationEndpoint = credentialsModule.domain + \"/authorize\";\n\nconst useProxy = Platform.select({ web: false, default: true });\nconst redirectUri = AuthSession.makeRedirectUri({ useProxy });\n\nexport default function Authentication({buttonParams, task}) {\n  const [name, setName] = React.useState(null);\n\n  const [request, result, promptAsync] = AuthSession.useAuthRequest(\n    {\n      redirectUri,\n      clientId: auth0ClientId,\n      // id_token will return a JWT token\n      responseType: \"id_token\",\n      // retrieve the user's profile\n      scopes: [\"openid\", \"profile\"],\n      extraParams: {\n        // ideally, this will be a random value\n        nonce: \"nonce\",\n      },\n    },\n    { authorizationEndpoint }\n  );\n\n  // Retrieve the redirect URL, add this to the callback URL list\n  // of your Auth0 application.\n  console.log(`Redirect URL: ${redirectUri}`);\n\n  const storeJwt = async (value) => {\n    try {\n      const jsonValue = JSON.stringify(value)\n      await AsyncStorage.setItem('@auth_jwt', jsonValue)\n    } catch (e) {\n      console.log(\"Storing JWT token failed -\"+e.message)\n    }\n  }\n\n  React.useEffect(() => {\n    if (result) {\n      if (result.error) {\n        Alert.alert(\n          \"Authentication error\",\n          result.params.error_description || \"something went wrong\"\n        );\n        return;\n      }\n      if (result.type === \"success\") {\n        // Retrieve the JWT token and decode it\n        const jwtToken = result.params.id_token;\n        const decoded = jwtDecode(jwtToken);\n        console.log(decoded);\n        const { name } = decoded;\n        storeJwt(decoded);\n        task()\n        setName(name);\n      }\n    }\n  }, [result]);\n\n  return (\n    <View>\n      {name ? (\n        <Text style={styles.containerBottom}>You are logged in, {name}!</Text>\n      ) : (\n        <Button\n          disabled={!request}\n          buttonStyle ={buttonParams.styleBtnBody}\n          titleStyle = {buttonParams.styleBtnTitle}\n          title= {buttonParams.titleTxt}\n          onPress={() => promptAsync({ useProxy })}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    textAlign: \"center\",\n    marginTop: 40,\n  },\n});"]},"metadata":{},"sourceType":"module"}
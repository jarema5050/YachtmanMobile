{"ast":null,"code":"import base64 from 'base64-js';\nexport function padding(str) {\n  var paddingLength = 4;\n  var mod = str.length % paddingLength;\n  var pad = paddingLength - mod;\n\n  if (mod === 0) {\n    return str;\n  }\n\n  return str + new Array(1 + pad).join('=');\n}\n\nfunction byteArrayToHex(raw) {\n  var HEX = '';\n\n  for (var i = 0; i < raw.length; i++) {\n    var _hex = raw[i].toString(16);\n\n    HEX += _hex.length === 2 ? _hex : '0' + _hex;\n  }\n\n  return HEX;\n}\n\nexport function decodeToHEX(str) {\n  return byteArrayToHex(base64.toByteArray(padding(str)));\n}","map":{"version":3,"sources":["/Users/sokolowski/Documents/Private Repositories/YachtmanMobile/node_modules/react-native-auth0/src/jwt/base64.js"],"names":["base64","padding","str","paddingLength","mod","length","pad","Array","join","byteArrayToHex","raw","HEX","i","_hex","toString","decodeToHEX","toByteArray"],"mappings":"AAIA,OAAOA,MAAP,MAAmB,WAAnB;AAEA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,GAAG,GAAGF,GAAG,CAACG,MAAJ,GAAaF,aAAzB;AACA,MAAMG,GAAG,GAAGH,aAAa,GAAGC,GAA5B;;AAEA,MAAIA,GAAG,KAAK,CAAZ,EAAe;AACb,WAAOF,GAAP;AACD;;AAED,SAAOA,GAAG,GAAG,IAAIK,KAAJ,CAAU,IAAID,GAAd,EAAmBE,IAAnB,CAAwB,GAAxB,CAAb;AACD;;AAED,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAIC,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACL,MAAxB,EAAgCO,CAAC,EAAjC,EAAqC;AACnC,QAAMC,IAAI,GAAGH,GAAG,CAACE,CAAD,CAAH,CAAOE,QAAP,CAAgB,EAAhB,CAAb;;AACAH,IAAAA,GAAG,IAAIE,IAAI,CAACR,MAAL,KAAgB,CAAhB,GAAoBQ,IAApB,GAA2B,MAAMA,IAAxC;AACD;;AAED,SAAOF,GAAP;AACD;;AAED,OAAO,SAASI,WAAT,CAAqBb,GAArB,EAA0B;AAC/B,SAAOO,cAAc,CAACT,MAAM,CAACgB,WAAP,CAAmBf,OAAO,CAACC,GAAD,CAA1B,CAAD,CAArB;AACD","sourcesContent":["/**\n * Borrowed from IDToken-verifier package\n * https://github.com/auth0/idtoken-verifier/blob/master/src/helpers/base64.js\n */\nimport base64 from 'base64-js';\n\nexport function padding(str) {\n  const paddingLength = 4;\n  const mod = str.length % paddingLength;\n  const pad = paddingLength - mod;\n\n  if (mod === 0) {\n    return str;\n  }\n\n  return str + new Array(1 + pad).join('=');\n}\n\nfunction byteArrayToHex(raw) {\n  let HEX = '';\n\n  for (let i = 0; i < raw.length; i++) {\n    const _hex = raw[i].toString(16);\n    HEX += _hex.length === 2 ? _hex : '0' + _hex;\n  }\n\n  return HEX;\n}\n\nexport function decodeToHEX(str) {\n  return byteArrayToHex(base64.toByteArray(padding(str)));\n}\n"]},"metadata":{},"sourceType":"module"}
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';
import { Dimensions, View } from 'react-native';
import { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';
import { animated, useSpring } from 'react-spring';
var ModalProviderContext = createContext(null);
var AnimatedContainer = animated(View);
var AnimatedContentContainer = animated(View);
var deviceHeight = Number(Dimensions.get('window').height);
var HEIGHT = deviceHeight / 2;
var defaultOptions = {
    height: HEIGHT,
    closeTreshold: 200,
};
export var BottomModalProvider = function (_a) {
    var children = _a.children;
    var _b = useState({
        content: null,
        options: defaultOptions,
    }), _c = _b[0], content = _c.content, stateOptions = _c.options, setState = _b[1];
    var height = stateOptions.height, closeTreshold = stateOptions.closeTreshold;
    var _d = useSpring(function () { return ({
        value: 0,
        opacity: 0,
    }); }), spring = _d[0], set = _d[1];
    var resetState = function () { return setState(function (_a) {
        var options = _a.options;
        return ({ content: null, options: options });
    }); };
    useEffect(function () {
        set({ value: content ? height : 0, opacity: content ? 1 : 0, config: { duration: 200 } });
    }, [content]);
    var closeModal = useCallback(function () {
        resetState();
    }, []);
    var showModal = useCallback(function (render) {
        if (typeof render === 'function') {
            var _a = render({ close: closeModal }), content_1 = _a.content, options_1 = __rest(_a, ["content"]);
            return setState({ content: content_1, options: __assign(__assign({}, stateOptions), options_1) });
        }
        var content = render.content, options = __rest(render, ["content"]);
        setState({ content: content, options: __assign(__assign({}, stateOptions), options) });
    }, []);
    return (<ModalProviderContext.Provider value={{ showModal: showModal, closeModal: closeModal }}>
      {children}
      <PanGestureHandler onHandlerStateChange={function (e) {
        if (e.nativeEvent.state === GestureState.END) {
            var value = height - e.nativeEvent.translationY;
            if (e.nativeEvent.velocityY > 100) {
                return resetState();
            }
            if (value < closeTreshold)
                resetState();
            if (value >= closeTreshold)
                set({ value: height, config: { duration: 200 } });
        }
    }} onGestureEvent={function (e) {
        var value = height - e.nativeEvent.translationY;
        set({ value: value, config: { duration: 50 } });
    }}>
        <AnimatedContainer style={{
        opacity: spring.opacity,
        display: spring.opacity.interpolate(function (v) { return (v > 0 ? 'flex' : 'none'); }),
        zIndex: 1,
        height: '100%',
        width: '100%',
        flex: 1,
        position: 'absolute',
        justifyContent: 'center',
        alignItems: 'center',
    }}>
          <View style={{
        opacity: 0.8,
        zIndex: 1,
        height: '100%',
        width: '100%',
        flex: 1,
        backgroundColor: 'black',
        position: 'absolute',
    }} onTouchEnd={function () { return resetState(); }}/>
          <AnimatedContentContainer style={{
        height: spring.value.interpolate({
            range: [0, height],
            output: [0, height],
        }),
        bottom: 0,
        paddingTop: '25px',
        position: 'absolute',
        zIndex: 3,
        width: '100%',
    }}>
            {content}
          </AnimatedContentContainer>
        </AnimatedContainer>
      </PanGestureHandler>
    </ModalProviderContext.Provider>);
};
export var useBottomModal = function () {
    return useContext(ModalProviderContext);
};
